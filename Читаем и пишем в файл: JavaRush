Требования:
1. Логика чтения/записи реализованная в методах save/load должна работать корректно в случае, если список users пустой.
2. Логика чтения/записи реализованная в методах save/load должна работать корректно в случае, если список users не пустой.
3. Класс Solution.JavaRush не должен поддерживать интерфейс Serializable.
4. Класс Solution.JavaRush должен быть публичным.
5. Класс Solution.JavaRush не должен поддерживать интерфейс Externalizable.

public class Solution {
    public static void main(String[] args) {
        try {
            File yourFile = File.createTempFile("JavaRush", null);
            OutputStream outputStream = new FileOutputStream(yourFile);
            InputStream inputStream = new FileInputStream(yourFile);

            JavaRush javaRush = new JavaRush();
            javaRush.save(outputStream);
            outputStream.flush();

            JavaRush loadedObject = new JavaRush();
            loadedObject.load(inputStream);
            System.out.println(javaRush.equals(loadedObject));

            outputStream.close();
            inputStream.close();

        } catch (IOException e) {
            System.out.println("Oops, something is wrong with my file");
        } catch (Exception e) {
            System.out.println("Oops, something is wrong with the save/load method");
        }
    }

    public static class JavaRush {
        public List<User> users = new ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss S dd MM yyyy");
        public void save(OutputStream outputStream) throws Exception {
            try (PrintWriter writer = new PrintWriter(outputStream)) {
                String isUsersPresent = users != null ? "yes" : "no" ;
                writer.println(isUsersPresent);
                if (users != null) {
                    for (User user : users) {
                        writer.println(user.getFirstName());
                        writer.println(user.getLastName());
                        String birthDate = sdf.format(user.getBirthDate());
                        writer.println(birthDate);
                        writer.println(user.isMale());
                        writer.println(user.getCountry().getDisplayName());
                    }
                }
                writer.flush();
            }
        }

        public void load(InputStream inputStream) throws Exception {
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
                if (reader.readLine().equals("yes")) {
                    while (reader.ready()) {
                        String firstName = reader.readLine();
                        String lastName = reader.readLine();
                        String birthDate = reader.readLine();
                        Date date = sdf.parse(birthDate);
                        boolean isMale = Boolean.parseBoolean(reader.readLine());
                        String country = reader.readLine();
                        User user = new User();
                        user.setFirstName(firstName);
                        user.setLastName(lastName);
                        user.setBirthDate(date);
                        user.setMale(isMale);
                        user.setCountry(User.Country.valueOf(country.toUpperCase()));
                        users.add(user);
                    }
                }
            }
        }
    }
}
