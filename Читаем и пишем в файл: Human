Требования:
1. Логика чтения/записи реализованная в методах save/load должна работать корректно в случае, если список assets пустой.
2. Логика чтения/записи реализованная в методах save/load должна работать корректно в случае, если поле name и список assets не пустые.
3. Класс Solution.Human не должен поддерживать интерфейс Serializable.
4. Класс Solution.Human должен быть публичным.
5. Класс Solution.Human не должен поддерживать интерфейс Externalizable.

public class Solution {
    public static void main(String[] args) {
        try {
            File your_file_name = File.createTempFile("JavaRush", null);
            OutputStream outputStream = new FileOutputStream(your_file_name);
            InputStream inputStream = new FileInputStream(your_file_name);

            Human ivanov = new Human();
            ivanov.save(outputStream);
            outputStream.flush();

            Human somePerson = new Human();
            somePerson.load(inputStream);
            inputStream.close();

        } catch (IOException e) {
            System.out.println("Oops, something wrong with my file");
        } catch (Exception e) {
            System.out.println("Oops, something wrong with save/load method");
        }
    }

    public static class Human {
        public String name;
        public List<Asset> assets = new ArrayList<>();

        public Human() {
        }

        public Human(String name, Asset... assets) {
            this.name = name;
            if (assets != null) {
                this.assets.addAll(Arrays.asList(assets));
            }
        }

        public void save(OutputStream outputStream) throws Exception {
            try (PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream))) {
                String isHumanPresent = (name != null && assets != null) ? "yes" : "no";
                writer.println(isHumanPresent);

                if (name != null) writer.println(name);
                if (assets != null) {
                    for (Asset asset : assets) {
                        writer.println(asset.getName());
                        writer.println(asset.getPrice());
                    }
                }
            }
        }

        public void load(InputStream inputStream) throws Exception {
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
                if (reader.readLine().equals("yes")) {
                    name = reader.readLine();
                    while (reader.ready()) {
                        String assetName = reader.readLine();
                        double price = Double.parseDouble(reader.readLine());
                        Asset asset = new Asset(assetName, price);
                        assets.add(asset);
                    }
                }
            }
        }
    }
}
